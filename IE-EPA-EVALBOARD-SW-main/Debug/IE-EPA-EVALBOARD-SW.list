
IE-EPA-EVALBOARD-SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002574  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  08002680  08002680  00003680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b0  080032b0  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080032b0  080032b0  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080032b0  080032b0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b0  080032b0  000042b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032b4  080032b4  000042b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080032b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002590  20000014  080032cc  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200025a4  080032cc  000055a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065c1  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a44  00000000  00000000  0000b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001646d  00000000  00000000  0000d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009fd9  00000000  00000000  00023c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00081e9f  00000000  00000000  0002dc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000afae5  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000005a3  00000000  00000000  000afb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c8c  00000000  00000000  000b00cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b1d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002668 	.word	0x08002668

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002668 	.word	0x08002668

0800014c <Paint_NewImage>:
 image   :   Pointer to the image cache
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4603      	mov	r3, r0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	460b      	mov	r3, r1
 8000160:	813b      	strh	r3, [r7, #8]
 8000162:	4613      	mov	r3, r2
 8000164:	80fb      	strh	r3, [r7, #6]
	Paint.Image = NULL;
 8000166:	4b24      	ldr	r3, [pc, #144]	@ (80001f8 <Paint_NewImage+0xac>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 800016c:	4a22      	ldr	r2, [pc, #136]	@ (80001f8 <Paint_NewImage+0xac>)
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	6013      	str	r3, [r2, #0]

	Paint.WidthMemory = Width;
 8000172:	4a21      	ldr	r2, [pc, #132]	@ (80001f8 <Paint_NewImage+0xac>)
 8000174:	897b      	ldrh	r3, [r7, #10]
 8000176:	8113      	strh	r3, [r2, #8]
	Paint.HeightMemory = Height;
 8000178:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <Paint_NewImage+0xac>)
 800017a:	893b      	ldrh	r3, [r7, #8]
 800017c:	8153      	strh	r3, [r2, #10]
	Paint.Color = Color;
 800017e:	4a1e      	ldr	r2, [pc, #120]	@ (80001f8 <Paint_NewImage+0xac>)
 8000180:	8b3b      	ldrh	r3, [r7, #24]
 8000182:	8193      	strh	r3, [r2, #12]
	Paint.WidthByte = (Paint.WidthMemory % 8 == 0) ? (Paint.WidthMemory / 8) : (Paint.WidthMemory / 8 + 1);
 8000184:	4b1c      	ldr	r3, [pc, #112]	@ (80001f8 <Paint_NewImage+0xac>)
 8000186:	891b      	ldrh	r3, [r3, #8]
 8000188:	f003 0307 	and.w	r3, r3, #7
 800018c:	b29b      	uxth	r3, r3
 800018e:	2b00      	cmp	r3, #0
 8000190:	d104      	bne.n	800019c <Paint_NewImage+0x50>
 8000192:	4b19      	ldr	r3, [pc, #100]	@ (80001f8 <Paint_NewImage+0xac>)
 8000194:	891b      	ldrh	r3, [r3, #8]
 8000196:	08db      	lsrs	r3, r3, #3
 8000198:	b29b      	uxth	r3, r3
 800019a:	e005      	b.n	80001a8 <Paint_NewImage+0x5c>
 800019c:	4b16      	ldr	r3, [pc, #88]	@ (80001f8 <Paint_NewImage+0xac>)
 800019e:	891b      	ldrh	r3, [r3, #8]
 80001a0:	08db      	lsrs	r3, r3, #3
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	3301      	adds	r3, #1
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	4a13      	ldr	r2, [pc, #76]	@ (80001f8 <Paint_NewImage+0xac>)
 80001aa:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 80001ac:	4a12      	ldr	r2, [pc, #72]	@ (80001f8 <Paint_NewImage+0xac>)
 80001ae:	893b      	ldrh	r3, [r7, #8]
 80001b0:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 80001b2:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <Paint_NewImage+0xac>)
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	81d3      	strh	r3, [r2, #14]
	Paint.Mirror = MIRROR_NONE;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <Paint_NewImage+0xac>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	821a      	strh	r2, [r3, #16]
	Paint.Scale = 2;
 80001be:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <Paint_NewImage+0xac>)
 80001c0:	2202      	movs	r2, #2
 80001c2:	82da      	strh	r2, [r3, #22]
	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80001c4:	88fb      	ldrh	r3, [r7, #6]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d002      	beq.n	80001d0 <Paint_NewImage+0x84>
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	2bb4      	cmp	r3, #180	@ 0xb4
 80001ce:	d106      	bne.n	80001de <Paint_NewImage+0x92>
		Paint.Width = Width;
 80001d0:	4a09      	ldr	r2, [pc, #36]	@ (80001f8 <Paint_NewImage+0xac>)
 80001d2:	897b      	ldrh	r3, [r7, #10]
 80001d4:	8093      	strh	r3, [r2, #4]
		Paint.Height = Height;
 80001d6:	4a08      	ldr	r2, [pc, #32]	@ (80001f8 <Paint_NewImage+0xac>)
 80001d8:	893b      	ldrh	r3, [r7, #8]
 80001da:	80d3      	strh	r3, [r2, #6]
 80001dc:	e006      	b.n	80001ec <Paint_NewImage+0xa0>
	} else {
		Paint.Width = Height;
 80001de:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <Paint_NewImage+0xac>)
 80001e0:	893b      	ldrh	r3, [r7, #8]
 80001e2:	8093      	strh	r3, [r2, #4]
		Paint.Height = Width;
 80001e4:	4a04      	ldr	r2, [pc, #16]	@ (80001f8 <Paint_NewImage+0xac>)
 80001e6:	897b      	ldrh	r3, [r7, #10]
 80001e8:	80d3      	strh	r3, [r2, #6]
	}
}
 80001ea:	bf00      	nop
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000030 	.word	0x20000030

080001fc <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(uint8_t *image) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8000204:	4a03      	ldr	r2, [pc, #12]	@ (8000214 <Paint_SelectImage+0x18>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6013      	str	r3, [r2, #0]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000030 	.word	0x20000030

08000218 <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color) {
 8000218:	b480      	push	{r7}
 800021a:	b08b      	sub	sp, #44	@ 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800022a:	4b87      	ldr	r3, [pc, #540]	@ (8000448 <Paint_SetPixel+0x230>)
 800022c:	889b      	ldrh	r3, [r3, #4]
 800022e:	88fa      	ldrh	r2, [r7, #6]
 8000230:	429a      	cmp	r2, r3
 8000232:	f200 8142 	bhi.w	80004ba <Paint_SetPixel+0x2a2>
 8000236:	4b84      	ldr	r3, [pc, #528]	@ (8000448 <Paint_SetPixel+0x230>)
 8000238:	88db      	ldrh	r3, [r3, #6]
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	429a      	cmp	r2, r3
 800023e:	f200 813c 	bhi.w	80004ba <Paint_SetPixel+0x2a2>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	uint16_t X, Y;

	switch (Paint.Rotate) {
 8000242:	4b81      	ldr	r3, [pc, #516]	@ (8000448 <Paint_SetPixel+0x230>)
 8000244:	89db      	ldrh	r3, [r3, #14]
 8000246:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800024a:	d02b      	beq.n	80002a4 <Paint_SetPixel+0x8c>
 800024c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000250:	f300 8135 	bgt.w	80004be <Paint_SetPixel+0x2a6>
 8000254:	2bb4      	cmp	r3, #180	@ 0xb4
 8000256:	d016      	beq.n	8000286 <Paint_SetPixel+0x6e>
 8000258:	2bb4      	cmp	r3, #180	@ 0xb4
 800025a:	f300 8130 	bgt.w	80004be <Paint_SetPixel+0x2a6>
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <Paint_SetPixel+0x50>
 8000262:	2b5a      	cmp	r3, #90	@ 0x5a
 8000264:	d005      	beq.n	8000272 <Paint_SetPixel+0x5a>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 8000266:	e12a      	b.n	80004be <Paint_SetPixel+0x2a6>
		X = Xpoint;
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Ypoint;
 800026c:	88bb      	ldrh	r3, [r7, #4]
 800026e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000270:	e022      	b.n	80002b8 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Ypoint - 1;
 8000272:	4b75      	ldr	r3, [pc, #468]	@ (8000448 <Paint_SetPixel+0x230>)
 8000274:	891a      	ldrh	r2, [r3, #8]
 8000276:	88bb      	ldrh	r3, [r7, #4]
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b29b      	uxth	r3, r3
 800027c:	3b01      	subs	r3, #1
 800027e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Xpoint;
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000284:	e018      	b.n	80002b8 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Xpoint - 1;
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <Paint_SetPixel+0x230>)
 8000288:	891a      	ldrh	r2, [r3, #8]
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	b29b      	uxth	r3, r3
 8000290:	3b01      	subs	r3, #1
 8000292:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Ypoint - 1;
 8000294:	4b6c      	ldr	r3, [pc, #432]	@ (8000448 <Paint_SetPixel+0x230>)
 8000296:	895a      	ldrh	r2, [r3, #10]
 8000298:	88bb      	ldrh	r3, [r7, #4]
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	b29b      	uxth	r3, r3
 800029e:	3b01      	subs	r3, #1
 80002a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 80002a2:	e009      	b.n	80002b8 <Paint_SetPixel+0xa0>
		X = Ypoint;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Xpoint - 1;
 80002a8:	4b67      	ldr	r3, [pc, #412]	@ (8000448 <Paint_SetPixel+0x230>)
 80002aa:	895a      	ldrh	r2, [r3, #10]
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	1ad3      	subs	r3, r2, r3
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	3b01      	subs	r3, #1
 80002b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 80002b6:	bf00      	nop
	}

	switch (Paint.Mirror) {
 80002b8:	4b63      	ldr	r3, [pc, #396]	@ (8000448 <Paint_SetPixel+0x230>)
 80002ba:	8a1b      	ldrh	r3, [r3, #16]
 80002bc:	2b03      	cmp	r3, #3
 80002be:	f200 8100 	bhi.w	80004c2 <Paint_SetPixel+0x2aa>
 80002c2:	a201      	add	r2, pc, #4	@ (adr r2, 80002c8 <Paint_SetPixel+0xb0>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	08000317 	.word	0x08000317
 80002cc:	080002d9 	.word	0x080002d9
 80002d0:	080002e9 	.word	0x080002e9
 80002d4:	080002f9 	.word	0x080002f9
	case MIRROR_NONE:
		break;
	case MIRROR_HORIZONTAL:
		X = Paint.WidthMemory - X - 1;
 80002d8:	4b5b      	ldr	r3, [pc, #364]	@ (8000448 <Paint_SetPixel+0x230>)
 80002da:	891a      	ldrh	r2, [r3, #8]
 80002dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	3b01      	subs	r3, #1
 80002e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
 80002e6:	e017      	b.n	8000318 <Paint_SetPixel+0x100>
	case MIRROR_VERTICAL:
		Y = Paint.HeightMemory - Y - 1;
 80002e8:	4b57      	ldr	r3, [pc, #348]	@ (8000448 <Paint_SetPixel+0x230>)
 80002ea:	895a      	ldrh	r2, [r3, #10]
 80002ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	3b01      	subs	r3, #1
 80002f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 80002f6:	e00f      	b.n	8000318 <Paint_SetPixel+0x100>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
 80002f8:	4b53      	ldr	r3, [pc, #332]	@ (8000448 <Paint_SetPixel+0x230>)
 80002fa:	891a      	ldrh	r2, [r3, #8]
 80002fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	b29b      	uxth	r3, r3
 8000302:	3b01      	subs	r3, #1
 8000304:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Y - 1;
 8000306:	4b50      	ldr	r3, [pc, #320]	@ (8000448 <Paint_SetPixel+0x230>)
 8000308:	895a      	ldrh	r2, [r3, #10]
 800030a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	b29b      	uxth	r3, r3
 8000310:	3b01      	subs	r3, #1
 8000312:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000314:	e000      	b.n	8000318 <Paint_SetPixel+0x100>
		break;
 8000316:	bf00      	nop
	default:
		return;
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 8000318:	4b4b      	ldr	r3, [pc, #300]	@ (8000448 <Paint_SetPixel+0x230>)
 800031a:	891b      	ldrh	r3, [r3, #8]
 800031c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80d1 	bhi.w	80004c6 <Paint_SetPixel+0x2ae>
 8000324:	4b48      	ldr	r3, [pc, #288]	@ (8000448 <Paint_SetPixel+0x230>)
 8000326:	895b      	ldrh	r3, [r3, #10]
 8000328:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80cb 	bhi.w	80004c6 <Paint_SetPixel+0x2ae>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	if (Paint.Scale == 2) {
 8000330:	4b45      	ldr	r3, [pc, #276]	@ (8000448 <Paint_SetPixel+0x230>)
 8000332:	8adb      	ldrh	r3, [r3, #22]
 8000334:	2b02      	cmp	r3, #2
 8000336:	d138      	bne.n	80003aa <Paint_SetPixel+0x192>
		uint32_t Addr = X / 8 + Y * Paint.WidthByte;
 8000338:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800033a:	08db      	lsrs	r3, r3, #3
 800033c:	b29b      	uxth	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000342:	4a41      	ldr	r2, [pc, #260]	@ (8000448 <Paint_SetPixel+0x230>)
 8000344:	8a52      	ldrh	r2, [r2, #18]
 8000346:	fb02 f303 	mul.w	r3, r2, r3
 800034a:	440b      	add	r3, r1
 800034c:	613b      	str	r3, [r7, #16]
		uint8_t Rdata = Paint.Image[Addr];
 800034e:	4b3e      	ldr	r3, [pc, #248]	@ (8000448 <Paint_SetPixel+0x230>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	73fb      	strb	r3, [r7, #15]
		if (Color == BLACK)
 800035a:	887b      	ldrh	r3, [r7, #2]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d112      	bne.n	8000386 <Paint_SetPixel+0x16e>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800036a:	fa42 f303 	asr.w	r3, r2, r3
 800036e:	b25a      	sxtb	r2, r3
 8000370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000374:	4013      	ands	r3, r2
 8000376:	b259      	sxtb	r1, r3
 8000378:	4b33      	ldr	r3, [pc, #204]	@ (8000448 <Paint_SetPixel+0x230>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	4413      	add	r3, r2
 8000380:	b2ca      	uxtb	r2, r1
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e0a0      	b.n	80004c8 <Paint_SetPixel+0x2b0>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000386:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000388:	f003 0307 	and.w	r3, r3, #7
 800038c:	2280      	movs	r2, #128	@ 0x80
 800038e:	fa42 f303 	asr.w	r3, r2, r3
 8000392:	b25a      	sxtb	r2, r3
 8000394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000398:	4313      	orrs	r3, r2
 800039a:	b259      	sxtb	r1, r3
 800039c:	4b2a      	ldr	r3, [pc, #168]	@ (8000448 <Paint_SetPixel+0x230>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	4413      	add	r3, r2
 80003a4:	b2ca      	uxtb	r2, r1
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e08e      	b.n	80004c8 <Paint_SetPixel+0x2b0>
	} else if (Paint.Scale == 4) {
 80003aa:	4b27      	ldr	r3, [pc, #156]	@ (8000448 <Paint_SetPixel+0x230>)
 80003ac:	8adb      	ldrh	r3, [r3, #22]
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d14c      	bne.n	800044c <Paint_SetPixel+0x234>
		uint16_t Width = (Paint.WidthMemory % 4 == 0) ? (Paint.WidthMemory / 4) : (Paint.WidthMemory / 4 + 1);
 80003b2:	4b25      	ldr	r3, [pc, #148]	@ (8000448 <Paint_SetPixel+0x230>)
 80003b4:	891b      	ldrh	r3, [r3, #8]
 80003b6:	f003 0303 	and.w	r3, r3, #3
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d104      	bne.n	80003ca <Paint_SetPixel+0x1b2>
 80003c0:	4b21      	ldr	r3, [pc, #132]	@ (8000448 <Paint_SetPixel+0x230>)
 80003c2:	891b      	ldrh	r3, [r3, #8]
 80003c4:	089b      	lsrs	r3, r3, #2
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	e005      	b.n	80003d6 <Paint_SetPixel+0x1be>
 80003ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <Paint_SetPixel+0x230>)
 80003cc:	891b      	ldrh	r3, [r3, #8]
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	83bb      	strh	r3, [r7, #28]
		uint32_t Addr = X / 4 + Y * Width;
 80003d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80003da:	089b      	lsrs	r3, r3, #2
 80003dc:	b29b      	uxth	r3, r3
 80003de:	4619      	mov	r1, r3
 80003e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80003e2:	8bba      	ldrh	r2, [r7, #28]
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	440b      	add	r3, r1
 80003ea:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	f003 0303 	and.w	r3, r3, #3
 80003f2:	807b      	strh	r3, [r7, #2]
		uint8_t Rdata = Paint.Image[Addr];
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <Paint_SetPixel+0x230>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	4413      	add	r3, r2
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	75fb      	strb	r3, [r7, #23]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8000400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000402:	f003 0303 	and.w	r3, r3, #3
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	f06f 02c0 	mvn.w	r2, #192	@ 0xc0
 800040c:	fa42 f303 	asr.w	r3, r2, r3
 8000410:	b25a      	sxtb	r2, r3
 8000412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000416:	4013      	ands	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	75fb      	strb	r3, [r7, #23]
		Paint.Image[Addr] = Rdata | (((Color << 6) & 0xC0) >> ((X % 4) * 2));
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	019b      	lsls	r3, r3, #6
 8000420:	b2da      	uxtb	r2, r3
 8000422:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000424:	f003 0303 	and.w	r3, r3, #3
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	fa42 f303 	asr.w	r3, r2, r3
 800042e:	b25a      	sxtb	r2, r3
 8000430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000434:	4313      	orrs	r3, r2
 8000436:	b259      	sxtb	r1, r3
 8000438:	4b03      	ldr	r3, [pc, #12]	@ (8000448 <Paint_SetPixel+0x230>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	4413      	add	r3, r2
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e040      	b.n	80004c8 <Paint_SetPixel+0x2b0>
 8000446:	bf00      	nop
 8000448:	20000030 	.word	0x20000030
	} else if (Paint.Scale == 7) {
 800044c:	4b20      	ldr	r3, [pc, #128]	@ (80004d0 <Paint_SetPixel+0x2b8>)
 800044e:	8adb      	ldrh	r3, [r3, #22]
 8000450:	2b07      	cmp	r3, #7
 8000452:	d139      	bne.n	80004c8 <Paint_SetPixel+0x2b0>
		uint32_t Addr = X / 2 + Y * Paint.WidthByte;
 8000454:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000456:	085b      	lsrs	r3, r3, #1
 8000458:	b29b      	uxth	r3, r3
 800045a:	4619      	mov	r1, r3
 800045c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800045e:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <Paint_SetPixel+0x2b8>)
 8000460:	8a52      	ldrh	r2, [r2, #18]
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	440b      	add	r3, r1
 8000468:	623b      	str	r3, [r7, #32]
		uint8_t Rdata = Paint.Image[Addr];
 800046a:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <Paint_SetPixel+0x2b8>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	4413      	add	r3, r2
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 8000476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 8000482:	fa42 f303 	asr.w	r3, r2, r3
 8000486:	b25a      	sxtb	r2, r3
 8000488:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800048c:	4013      	ands	r3, r2
 800048e:	b25b      	sxtb	r3, r3
 8000490:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	011a      	lsls	r2, r3, #4
 8000496:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	fa42 f303 	asr.w	r3, r2, r3
 80004a2:	b25a      	sxtb	r2, r3
 80004a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b259      	sxtb	r1, r3
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <Paint_SetPixel+0x2b8>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	6a3b      	ldr	r3, [r7, #32]
 80004b2:	4413      	add	r3, r2
 80004b4:	b2ca      	uxtb	r2, r1
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e006      	b.n	80004c8 <Paint_SetPixel+0x2b0>
		return;
 80004ba:	bf00      	nop
 80004bc:	e004      	b.n	80004c8 <Paint_SetPixel+0x2b0>
		return;
 80004be:	bf00      	nop
 80004c0:	e002      	b.n	80004c8 <Paint_SetPixel+0x2b0>
		return;
 80004c2:	bf00      	nop
 80004c4:	e000      	b.n	80004c8 <Paint_SetPixel+0x2b0>
		return;
 80004c6:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 80004c8:	372c      	adds	r7, #44	@ 0x2c
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000030 	.word	0x20000030

080004d4 <Paint_DrawPoint>:
 Ypoint		: The Ypoint coordinate of the point
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color, DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4604      	mov	r4, r0
 80004dc:	4608      	mov	r0, r1
 80004de:	4611      	mov	r1, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	4623      	mov	r3, r4
 80004e4:	80fb      	strh	r3, [r7, #6]
 80004e6:	4603      	mov	r3, r0
 80004e8:	80bb      	strh	r3, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	807b      	strh	r3, [r7, #2]
 80004ee:	4613      	mov	r3, r2
 80004f0:	707b      	strb	r3, [r7, #1]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80004f2:	4b42      	ldr	r3, [pc, #264]	@ (80005fc <Paint_DrawPoint+0x128>)
 80004f4:	889b      	ldrh	r3, [r3, #4]
 80004f6:	88fa      	ldrh	r2, [r7, #6]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d87a      	bhi.n	80005f2 <Paint_DrawPoint+0x11e>
 80004fc:	4b3f      	ldr	r3, [pc, #252]	@ (80005fc <Paint_DrawPoint+0x128>)
 80004fe:	88db      	ldrh	r3, [r3, #6]
 8000500:	88ba      	ldrh	r2, [r7, #4]
 8000502:	429a      	cmp	r2, r3
 8000504:	d875      	bhi.n	80005f2 <Paint_DrawPoint+0x11e>
		//printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
		return;
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 8000506:	f897 3020 	ldrb.w	r3, [r7, #32]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d144      	bne.n	8000598 <Paint_DrawPoint+0xc4>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800050e:	2300      	movs	r3, #0
 8000510:	81fb      	strh	r3, [r7, #14]
 8000512:	e039      	b.n	8000588 <Paint_DrawPoint+0xb4>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000514:	2300      	movs	r3, #0
 8000516:	81bb      	strh	r3, [r7, #12]
 8000518:	e029      	b.n	800056e <Paint_DrawPoint+0x9a>
				if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800051a:	88fa      	ldrh	r2, [r7, #6]
 800051c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000520:	441a      	add	r2, r3
 8000522:	787b      	ldrb	r3, [r7, #1]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	db28      	blt.n	800057c <Paint_DrawPoint+0xa8>
 800052a:	88ba      	ldrh	r2, [r7, #4]
 800052c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000530:	441a      	add	r2, r3
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	db20      	blt.n	800057c <Paint_DrawPoint+0xa8>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800053a:	89fa      	ldrh	r2, [r7, #14]
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	4413      	add	r3, r2
 8000540:	b29a      	uxth	r2, r3
 8000542:	787b      	ldrb	r3, [r7, #1]
 8000544:	b29b      	uxth	r3, r3
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	b298      	uxth	r0, r3
 800054a:	89ba      	ldrh	r2, [r7, #12]
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	b29a      	uxth	r2, r3
 8000552:	787b      	ldrb	r3, [r7, #1]
 8000554:	b29b      	uxth	r3, r3
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	b29b      	uxth	r3, r3
 800055a:	887a      	ldrh	r2, [r7, #2]
 800055c:	4619      	mov	r1, r3
 800055e:	f7ff fe5b 	bl	8000218 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000566:	b29b      	uxth	r3, r3
 8000568:	3301      	adds	r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	81bb      	strh	r3, [r7, #12]
 800056e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000572:	787b      	ldrb	r3, [r7, #1]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	3b01      	subs	r3, #1
 8000578:	429a      	cmp	r2, r3
 800057a:	dbce      	blt.n	800051a <Paint_DrawPoint+0x46>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800057c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000580:	b29b      	uxth	r3, r3
 8000582:	3301      	adds	r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	81fb      	strh	r3, [r7, #14]
 8000588:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800058c:	787b      	ldrb	r3, [r7, #1]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	3b01      	subs	r3, #1
 8000592:	429a      	cmp	r2, r3
 8000594:	dbbe      	blt.n	8000514 <Paint_DrawPoint+0x40>
 8000596:	e02d      	b.n	80005f4 <Paint_DrawPoint+0x120>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8000598:	2300      	movs	r3, #0
 800059a:	81fb      	strh	r3, [r7, #14]
 800059c:	e023      	b.n	80005e6 <Paint_DrawPoint+0x112>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	81bb      	strh	r3, [r7, #12]
 80005a2:	e015      	b.n	80005d0 <Paint_DrawPoint+0xfc>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80005a4:	89fa      	ldrh	r2, [r7, #14]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	4413      	add	r3, r2
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b298      	uxth	r0, r3
 80005b0:	89ba      	ldrh	r2, [r7, #12]
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	887a      	ldrh	r2, [r7, #2]
 80005be:	4619      	mov	r1, r3
 80005c0:	f7ff fe2a 	bl	8000218 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 80005c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80005d4:	787b      	ldrb	r3, [r7, #1]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dbe4      	blt.n	80005a4 <Paint_DrawPoint+0xd0>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 80005da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	81fb      	strh	r3, [r7, #14]
 80005e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbd6      	blt.n	800059e <Paint_DrawPoint+0xca>
 80005f0:	e000      	b.n	80005f4 <Paint_DrawPoint+0x120>
		return;
 80005f2:	bf00      	nop
			}
		}
	}
}
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000030 	.word	0x20000030

08000600 <Paint_DrawLine>:
 Yend   ：End point Ypoint coordinate
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b08d      	sub	sp, #52	@ 0x34
 8000604:	af02      	add	r7, sp, #8
 8000606:	4604      	mov	r4, r0
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4623      	mov	r3, r4
 8000610:	80fb      	strh	r3, [r7, #6]
 8000612:	4603      	mov	r3, r0
 8000614:	80bb      	strh	r3, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	807b      	strh	r3, [r7, #2]
 800061a:	4613      	mov	r3, r2
 800061c:	803b      	strh	r3, [r7, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width || Yend > Paint.Height) {
 800061e:	4b4b      	ldr	r3, [pc, #300]	@ (800074c <Paint_DrawLine+0x14c>)
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	88fa      	ldrh	r2, [r7, #6]
 8000624:	429a      	cmp	r2, r3
 8000626:	f200 8088 	bhi.w	800073a <Paint_DrawLine+0x13a>
 800062a:	4b48      	ldr	r3, [pc, #288]	@ (800074c <Paint_DrawLine+0x14c>)
 800062c:	88db      	ldrh	r3, [r3, #6]
 800062e:	88ba      	ldrh	r2, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	f200 8082 	bhi.w	800073a <Paint_DrawLine+0x13a>
 8000636:	4b45      	ldr	r3, [pc, #276]	@ (800074c <Paint_DrawLine+0x14c>)
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	887a      	ldrh	r2, [r7, #2]
 800063c:	429a      	cmp	r2, r3
 800063e:	d87c      	bhi.n	800073a <Paint_DrawLine+0x13a>
 8000640:	4b42      	ldr	r3, [pc, #264]	@ (800074c <Paint_DrawLine+0x14c>)
 8000642:	88db      	ldrh	r3, [r3, #6]
 8000644:	883a      	ldrh	r2, [r7, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d877      	bhi.n	800073a <Paint_DrawLine+0x13a>
		//DEBUG("Paint_DrawLine Input exceeds the normal display range\r\n");
		return;
	}

	uint16_t Xpoint = Xstart;
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Ypoint = Ystart;
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000652:	887a      	ldrh	r2, [r7, #2]
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	bfb8      	it	lt
 800065c:	425b      	neglt	r3, r3
 800065e:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000660:	883a      	ldrh	r2, [r7, #0]
 8000662:	88bb      	ldrh	r3, [r7, #4]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	bfb8      	it	lt
 800066a:	425b      	neglt	r3, r3
 800066c:	425b      	negs	r3, r3
 800066e:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	429a      	cmp	r2, r3
 8000676:	d201      	bcs.n	800067c <Paint_DrawLine+0x7c>
 8000678:	2301      	movs	r3, #1
 800067a:	e001      	b.n	8000680 <Paint_DrawLine+0x80>
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8000682:	88ba      	ldrh	r2, [r7, #4]
 8000684:	883b      	ldrh	r3, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d201      	bcs.n	800068e <Paint_DrawLine+0x8e>
 800068a:	2301      	movs	r3, #1
 800068c:	e001      	b.n	8000692 <Paint_DrawLine+0x92>
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4413      	add	r3, r2
 800069a:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	77fb      	strb	r3, [r7, #31]

	for (;;) {
		Dotted_Len++;
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	3301      	adds	r3, #1
 80006a4:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80006a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d117      	bne.n	80006de <Paint_DrawLine+0xde>
 80006ae:	7ffa      	ldrb	r2, [r7, #31]
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <Paint_DrawLine+0x150>)
 80006b2:	fba3 1302 	umull	r1, r3, r3, r2
 80006b6:	0859      	lsrs	r1, r3, #1
 80006b8:	460b      	mov	r3, r1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	440b      	add	r3, r1
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10b      	bne.n	80006de <Paint_DrawLine+0xde>
			//DEBUG("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80006c6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80006ca:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80006cc:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80006ce:	2201      	movs	r2, #1
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	f7ff fefe 	bl	80004d4 <Paint_DrawPoint>
			Dotted_Len = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	77fb      	strb	r3, [r7, #31]
 80006dc:	e008      	b.n	80006f0 <Paint_DrawLine+0xf0>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80006de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80006e2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80006e4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80006e6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80006e8:	2401      	movs	r4, #1
 80006ea:	9400      	str	r4, [sp, #0]
 80006ec:	f7ff fef2 	bl	80004d4 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dc0c      	bgt.n	8000714 <Paint_DrawLine+0x114>
			if (Xpoint == Xend)
 80006fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d01d      	beq.n	800073e <Paint_DrawLine+0x13e>
				break;
			Esp += dy;
 8000702:	6a3a      	ldr	r2, [r7, #32]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	b29a      	uxth	r2, r3
 800070e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000710:	4413      	add	r3, r2
 8000712:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
		if (2 * Esp <= dx) {
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbc0      	blt.n	80006a0 <Paint_DrawLine+0xa0>
			if (Ypoint == Yend)
 800071e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000720:	883b      	ldrh	r3, [r7, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	d00d      	beq.n	8000742 <Paint_DrawLine+0x142>
				break;
			Esp += dx;
 8000726:	6a3a      	ldr	r2, [r7, #32]
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	4413      	add	r3, r2
 800072c:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	b29a      	uxth	r2, r3
 8000732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000734:	4413      	add	r3, r2
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24
		Dotted_Len++;
 8000738:	e7b2      	b.n	80006a0 <Paint_DrawLine+0xa0>
		return;
 800073a:	bf00      	nop
 800073c:	e002      	b.n	8000744 <Paint_DrawLine+0x144>
				break;
 800073e:	bf00      	nop
 8000740:	e000      	b.n	8000744 <Paint_DrawLine+0x144>
				break;
 8000742:	bf00      	nop
		}
	}
}
 8000744:	372c      	adds	r7, #44	@ 0x2c
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030
 8000750:	aaaaaaab 	.word	0xaaaaaaab

08000754 <Paint_DrawRectangle>:
 Yend   ：Rectangular  End point Ypoint coordinate
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af04      	add	r7, sp, #16
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	4603      	mov	r3, r0
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	803b      	strh	r3, [r7, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width || Yend > Paint.Height) {
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <Paint_DrawRectangle+0xfc>)
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	88fa      	ldrh	r2, [r7, #6]
 8000778:	429a      	cmp	r2, r3
 800077a:	d864      	bhi.n	8000846 <Paint_DrawRectangle+0xf2>
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <Paint_DrawRectangle+0xfc>)
 800077e:	88db      	ldrh	r3, [r3, #6]
 8000780:	88ba      	ldrh	r2, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	d85f      	bhi.n	8000846 <Paint_DrawRectangle+0xf2>
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <Paint_DrawRectangle+0xfc>)
 8000788:	889b      	ldrh	r3, [r3, #4]
 800078a:	887a      	ldrh	r2, [r7, #2]
 800078c:	429a      	cmp	r2, r3
 800078e:	d85a      	bhi.n	8000846 <Paint_DrawRectangle+0xf2>
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <Paint_DrawRectangle+0xfc>)
 8000792:	88db      	ldrh	r3, [r3, #6]
 8000794:	883a      	ldrh	r2, [r7, #0]
 8000796:	429a      	cmp	r2, r3
 8000798:	d855      	bhi.n	8000846 <Paint_DrawRectangle+0xf2>
		//DEBUG("Input exceeds the normal display range\r\n");
		return;
	}

	if (Draw_Fill) {
 800079a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d018      	beq.n	80007d4 <Paint_DrawRectangle+0x80>
		uint16_t Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	81fb      	strh	r3, [r7, #14]
 80007a6:	e010      	b.n	80007ca <Paint_DrawRectangle+0x76>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width, LINE_STYLE_SOLID);
 80007a8:	89fc      	ldrh	r4, [r7, #14]
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	89f9      	ldrh	r1, [r7, #14]
 80007ae:	88f8      	ldrh	r0, [r7, #6]
 80007b0:	2300      	movs	r3, #0
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	8c3b      	ldrh	r3, [r7, #32]
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	4623      	mov	r3, r4
 80007c0:	f7ff ff1e 	bl	8000600 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	3301      	adds	r3, #1
 80007c8:	81fb      	strh	r3, [r7, #14]
 80007ca:	89fa      	ldrh	r2, [r7, #14]
 80007cc:	883b      	ldrh	r3, [r7, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d3ea      	bcc.n	80007a8 <Paint_DrawRectangle+0x54>
 80007d2:	e039      	b.n	8000848 <Paint_DrawRectangle+0xf4>
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80007d4:	88bc      	ldrh	r4, [r7, #4]
 80007d6:	887a      	ldrh	r2, [r7, #2]
 80007d8:	88b9      	ldrh	r1, [r7, #4]
 80007da:	88f8      	ldrh	r0, [r7, #6]
 80007dc:	2300      	movs	r3, #0
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	8c3b      	ldrh	r3, [r7, #32]
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4623      	mov	r3, r4
 80007ec:	f7ff ff08 	bl	8000600 <Paint_DrawLine>
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80007f0:	883c      	ldrh	r4, [r7, #0]
 80007f2:	88fa      	ldrh	r2, [r7, #6]
 80007f4:	88b9      	ldrh	r1, [r7, #4]
 80007f6:	88f8      	ldrh	r0, [r7, #6]
 80007f8:	2300      	movs	r3, #0
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	8c3b      	ldrh	r3, [r7, #32]
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	4623      	mov	r3, r4
 8000808:	f7ff fefa 	bl	8000600 <Paint_DrawLine>
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800080c:	88bc      	ldrh	r4, [r7, #4]
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	8839      	ldrh	r1, [r7, #0]
 8000812:	8878      	ldrh	r0, [r7, #2]
 8000814:	2300      	movs	r3, #0
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8c3b      	ldrh	r3, [r7, #32]
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff feec 	bl	8000600 <Paint_DrawLine>
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8000828:	883c      	ldrh	r4, [r7, #0]
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	8839      	ldrh	r1, [r7, #0]
 800082e:	8878      	ldrh	r0, [r7, #2]
 8000830:	2300      	movs	r3, #0
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	8c3b      	ldrh	r3, [r7, #32]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4623      	mov	r3, r4
 8000840:	f7ff fede 	bl	8000600 <Paint_DrawLine>
 8000844:	e000      	b.n	8000848 <Paint_DrawRectangle+0xf4>
		return;
 8000846:	bf00      	nop
	}
}
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	20000030 	.word	0x20000030

08000854 <Paint_DrawChar>:
 Acsii_Char       ：To display the English characters
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4603      	mov	r3, r0
 800085e:	81fb      	strh	r3, [r7, #14]
 8000860:	460b      	mov	r3, r1
 8000862:	81bb      	strh	r3, [r7, #12]
 8000864:	4613      	mov	r3, r2
 8000866:	72fb      	strb	r3, [r7, #11]
	uint16_t Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000868:	4b4c      	ldr	r3, [pc, #304]	@ (800099c <Paint_DrawChar+0x148>)
 800086a:	889b      	ldrh	r3, [r3, #4]
 800086c:	89fa      	ldrh	r2, [r7, #14]
 800086e:	429a      	cmp	r2, r3
 8000870:	f200 808f 	bhi.w	8000992 <Paint_DrawChar+0x13e>
 8000874:	4b49      	ldr	r3, [pc, #292]	@ (800099c <Paint_DrawChar+0x148>)
 8000876:	88db      	ldrh	r3, [r3, #6]
 8000878:	89ba      	ldrh	r2, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	f200 8089 	bhi.w	8000992 <Paint_DrawChar+0x13e>
		//DEBUG("Paint_DrawChar Input exceeds the normal display range\r\n");
		return;
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	3b20      	subs	r3, #32
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	88d2      	ldrh	r2, [r2, #6]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	8892      	ldrh	r2, [r2, #4]
 8000890:	08d2      	lsrs	r2, r2, #3
 8000892:	b292      	uxth	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	8892      	ldrh	r2, [r2, #4]
 800089a:	f002 0207 	and.w	r2, r2, #7
 800089e:	b292      	uxth	r2, r2
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2201      	movne	r2, #1
 80008a6:	2200      	moveq	r2, #0
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440a      	add	r2, r1
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	4413      	add	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	83fb      	strh	r3, [r7, #30]
 80008c0:	e061      	b.n	8000986 <Paint_DrawChar+0x132>
		for (Column = 0; Column < Font->Width; Column++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	83bb      	strh	r3, [r7, #28]
 80008c6:	e04c      	b.n	8000962 <Paint_DrawChar+0x10e>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80008c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008ca:	2bff      	cmp	r3, #255	@ 0xff
 80008cc:	d118      	bne.n	8000900 <Paint_DrawChar+0xac>
				if (*ptr & (0x80 >> (Column % 8)))
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	8bbb      	ldrh	r3, [r7, #28]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	fa42 f303 	asr.w	r3, r2, r3
 80008e0:	400b      	ands	r3, r1
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d031      	beq.n	800094a <Paint_DrawChar+0xf6>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80008e6:	89fa      	ldrh	r2, [r7, #14]
 80008e8:	8bbb      	ldrh	r3, [r7, #28]
 80008ea:	4413      	add	r3, r2
 80008ec:	b298      	uxth	r0, r3
 80008ee:	89ba      	ldrh	r2, [r7, #12]
 80008f0:	8bfb      	ldrh	r3, [r7, #30]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008f8:	4619      	mov	r1, r3
 80008fa:	f7ff fc8d 	bl	8000218 <Paint_SetPixel>
 80008fe:	e024      	b.n	800094a <Paint_DrawChar+0xf6>
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	8bbb      	ldrh	r3, [r7, #28]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	fa42 f303 	asr.w	r3, r2, r3
 8000912:	400b      	ands	r3, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00c      	beq.n	8000932 <Paint_DrawChar+0xde>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000918:	89fa      	ldrh	r2, [r7, #14]
 800091a:	8bbb      	ldrh	r3, [r7, #28]
 800091c:	4413      	add	r3, r2
 800091e:	b298      	uxth	r0, r3
 8000920:	89ba      	ldrh	r2, [r7, #12]
 8000922:	8bfb      	ldrh	r3, [r7, #30]
 8000924:	4413      	add	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800092a:	4619      	mov	r1, r3
 800092c:	f7ff fc74 	bl	8000218 <Paint_SetPixel>
 8000930:	e00b      	b.n	800094a <Paint_DrawChar+0xf6>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000932:	89fa      	ldrh	r2, [r7, #14]
 8000934:	8bbb      	ldrh	r3, [r7, #28]
 8000936:	4413      	add	r3, r2
 8000938:	b298      	uxth	r0, r3
 800093a:	89ba      	ldrh	r2, [r7, #12]
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	4413      	add	r3, r2
 8000940:	b29b      	uxth	r3, r3
 8000942:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fc67 	bl	8000218 <Paint_SetPixel>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 800094a:	8bbb      	ldrh	r3, [r7, #28]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	b29b      	uxth	r3, r3
 8000952:	2b07      	cmp	r3, #7
 8000954:	d102      	bne.n	800095c <Paint_DrawChar+0x108>
				ptr++;
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	3301      	adds	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 800095c:	8bbb      	ldrh	r3, [r7, #28]
 800095e:	3301      	adds	r3, #1
 8000960:	83bb      	strh	r3, [r7, #28]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	8bba      	ldrh	r2, [r7, #28]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3ad      	bcc.n	80008c8 <Paint_DrawChar+0x74>
		} // Write a line
		if (Font->Width % 8 != 0)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	b29b      	uxth	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <Paint_DrawChar+0x12c>
			ptr++;
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	3301      	adds	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8000980:	8bfb      	ldrh	r3, [r7, #30]
 8000982:	3301      	adds	r3, #1
 8000984:	83fb      	strh	r3, [r7, #30]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	88db      	ldrh	r3, [r3, #6]
 800098a:	8bfa      	ldrh	r2, [r7, #30]
 800098c:	429a      	cmp	r2, r3
 800098e:	d398      	bcc.n	80008c2 <Paint_DrawChar+0x6e>
 8000990:	e000      	b.n	8000994 <Paint_DrawChar+0x140>
		return;
 8000992:	bf00      	nop
	} // Write all
}
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000030 	.word	0x20000030

080009a0 <Paint_DrawString_EN>:
 pString          ：The first address of the English string to be displayed
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char *pString, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	60ba      	str	r2, [r7, #8]
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4603      	mov	r3, r0
 80009ac:	81fb      	strh	r3, [r7, #14]
 80009ae:	460b      	mov	r3, r1
 80009b0:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpoint = Xstart;
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	82fb      	strh	r3, [r7, #22]
	uint16_t Ypoint = Ystart;
 80009b6:	89bb      	ldrh	r3, [r7, #12]
 80009b8:	82bb      	strh	r3, [r7, #20]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <Paint_DrawString_EN+0xa0>)
 80009bc:	889b      	ldrh	r3, [r3, #4]
 80009be:	89fa      	ldrh	r2, [r7, #14]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d838      	bhi.n	8000a36 <Paint_DrawString_EN+0x96>
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <Paint_DrawString_EN+0xa0>)
 80009c6:	88db      	ldrh	r3, [r3, #6]
 80009c8:	89ba      	ldrh	r2, [r7, #12]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d833      	bhi.n	8000a36 <Paint_DrawString_EN+0x96>
		//DEBUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
		return;
	}

	while (*pString != '\0') {
 80009ce:	e02d      	b.n	8000a2c <Paint_DrawString_EN+0x8c>
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 80009d0:	8afb      	ldrh	r3, [r7, #22]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <Paint_DrawString_EN+0xa0>)
 80009da:	8892      	ldrh	r2, [r2, #4]
 80009dc:	4293      	cmp	r3, r2
 80009de:	dd06      	ble.n	80009ee <Paint_DrawString_EN+0x4e>
			Xpoint = Xstart;
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	8abb      	ldrh	r3, [r7, #20]
 80009ea:	4413      	add	r3, r2
 80009ec:	82bb      	strh	r3, [r7, #20]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80009ee:	8abb      	ldrh	r3, [r7, #20]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	88d2      	ldrh	r2, [r2, #6]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <Paint_DrawString_EN+0xa0>)
 80009f8:	88d2      	ldrh	r2, [r2, #6]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	dd03      	ble.n	8000a06 <Paint_DrawString_EN+0x66>
			Xpoint = Xstart;
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8000a02:	89bb      	ldrh	r3, [r7, #12]
 8000a04:	82bb      	strh	r3, [r7, #20]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground, Color_Background);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	8ab9      	ldrh	r1, [r7, #20]
 8000a0c:	8af8      	ldrh	r0, [r7, #22]
 8000a0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	8c3b      	ldrh	r3, [r7, #32]
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f7ff ff1c 	bl	8000854 <Paint_DrawChar>

		//The next character of the address
		pString++;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	889a      	ldrh	r2, [r3, #4]
 8000a26:	8afb      	ldrh	r3, [r7, #22]
 8000a28:	4413      	add	r3, r2
 8000a2a:	82fb      	strh	r3, [r7, #22]
	while (*pString != '\0') {
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1cd      	bne.n	80009d0 <Paint_DrawString_EN+0x30>
 8000a34:	e000      	b.n	8000a38 <Paint_DrawString_EN+0x98>
		return;
 8000a36:	bf00      	nop
	}
}
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000030 	.word	0x20000030

08000a44 <RESET_HIG>:
#ifndef SRC_SSD1680_C_
#define SRC_SSD1680_C_

#include "main.h"

static void RESET_HIG() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a4e:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <RESET_HIG+0x14>)
 8000a50:	f000 ff65 	bl	800191e <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40010800 	.word	0x40010800

08000a5c <RESET_LOW>:

static void RESET_LOW() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a66:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <RESET_LOW+0x14>)
 8000a68:	f000 ff59 	bl	800191e <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010800 	.word	0x40010800

08000a74 <CS_HIG>:

static void CS_HIG() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2140      	movs	r1, #64	@ 0x40
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <CS_HIG+0x14>)
 8000a7e:	f000 ff4e 	bl	800191e <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <CS_LOW>:

static void CS_LOW() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2140      	movs	r1, #64	@ 0x40
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <CS_LOW+0x14>)
 8000a96:	f000 ff42 	bl	800191e <HAL_GPIO_WritePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <DC_HIG>:

static void DC_HIG() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <DC_HIG+0x14>)
 8000aae:	f000 ff36 	bl	800191e <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011000 	.word	0x40011000

08000abc <DC_LOW>:

static void DC_LOW() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <DC_LOW+0x14>)
 8000ac6:	f000 ff2a 	bl	800191e <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40011000 	.word	0x40011000

08000ad4 <BUSY_READ>:

static uint8_t BUSY_READ() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin);
 8000ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <BUSY_READ+0x14>)
 8000ade:	f000 ff07 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010800 	.word	0x40010800

08000aec <Delay_ms>:

static void Delay_ms(uint16_t ms) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(ms);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc6d 	bl	80013d8 <HAL_Delay>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <SPI_WriteByte>:

extern SPI_HandleTypeDef hspi1;
static void SPI_WriteByte(uint8_t value) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000b12:	1df9      	adds	r1, r7, #7
 8000b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <SPI_WriteByte+0x20>)
 8000b1c:	f001 fb7a 	bl	8002214 <HAL_SPI_Transmit>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20002548 	.word	0x20002548

08000b2c <EPD_Reset>:

///////////////////////////////////

static void EPD_Reset(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	RESET_HIG();
 8000b30:	f7ff ff88 	bl	8000a44 <RESET_HIG>
	Delay_ms(20);
 8000b34:	2014      	movs	r0, #20
 8000b36:	f7ff ffd9 	bl	8000aec <Delay_ms>
	RESET_LOW();
 8000b3a:	f7ff ff8f 	bl	8000a5c <RESET_LOW>
	Delay_ms(2);
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff ffd4 	bl	8000aec <Delay_ms>
	RESET_HIG();
 8000b44:	f7ff ff7e 	bl	8000a44 <RESET_HIG>
	Delay_ms(20);
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f7ff ffcf 	bl	8000aec <Delay_ms>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <EPD_SendCommand>:

static void EPD_SendCommand(uint8_t Reg) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 8000b5c:	f7ff ffae 	bl	8000abc <DC_LOW>
	CS_LOW();
 8000b60:	f7ff ff94 	bl	8000a8c <CS_LOW>
	SPI_WriteByte(Reg);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffce 	bl	8000b08 <SPI_WriteByte>
	CS_HIG();
 8000b6c:	f7ff ff82 	bl	8000a74 <CS_HIG>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <EPD_SendData>:

static void EPD_SendData(uint8_t Data) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	DC_HIG();
 8000b82:	f7ff ff8f 	bl	8000aa4 <DC_HIG>
	CS_LOW();
 8000b86:	f7ff ff81 	bl	8000a8c <CS_LOW>
	SPI_WriteByte(Data);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffbb 	bl	8000b08 <SPI_WriteByte>
	CS_HIG();
 8000b92:	f7ff ff6f 	bl	8000a74 <CS_HIG>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <EPD_ReadBusy>:

static void EPD_ReadBusy(void) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
	while (1) {	 //=1 BUSY
		if (BUSY_READ() == 0)
 8000ba2:	f7ff ff97 	bl	8000ad4 <BUSY_READ>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <EPD_ReadBusy+0x16>
			break;
		Delay_ms(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f7ff ff9d 	bl	8000aec <Delay_ms>
		if (BUSY_READ() == 0)
 8000bb2:	e7f6      	b.n	8000ba2 <EPD_ReadBusy+0x4>
			break;
 8000bb4:	bf00      	nop
	}
	Delay_ms(10);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f7ff ff98 	bl	8000aec <Delay_ms>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <EPD_SetWindows>:

/////////////////////////////////////

static void EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4623      	mov	r3, r4
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	803b      	strh	r3, [r7, #0]
	EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000bde:	2044      	movs	r0, #68	@ 0x44
 8000be0:	f7ff ffb7 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData((Xstart >> 3) & 0xFF);
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffc3 	bl	8000b78 <EPD_SendData>
	EPD_SendData((Xend >> 3) & 0xFF);
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffbc 	bl	8000b78 <EPD_SendData>

	EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000c00:	2045      	movs	r0, #69	@ 0x45
 8000c02:	f7ff ffa6 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffb4 	bl	8000b78 <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ffad 	bl	8000b78 <EPD_SendData>
	EPD_SendData(Yend & 0xFF);
 8000c1e:	883b      	ldrh	r3, [r7, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ffa8 	bl	8000b78 <EPD_SendData>
	EPD_SendData((Yend >> 8) & 0xFF);
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ffa1 	bl	8000b78 <EPD_SendData>
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}

08000c3e <EPD_SetCursor>:

static void EPD_SetCursor(uint8_t Xstart, uint16_t Ystart) {
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	460a      	mov	r2, r1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80bb      	strh	r3, [r7, #4]
	EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000c4e:	204e      	movs	r0, #78	@ 0x4e
 8000c50:	f7ff ff7f 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(Xstart & 0xFF);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff8e 	bl	8000b78 <EPD_SendData>

	EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000c5c:	204f      	movs	r0, #79	@ 0x4f
 8000c5e:	f7ff ff78 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff86 	bl	8000b78 <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff7f 	bl	8000b78 <EPD_SendData>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <EPD_TurnOnDisplay>:

static void EPD_TurnOnDisplay(void) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x18);
 8000c86:	2018      	movs	r0, #24
 8000c88:	f7ff ff63 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0X80);
 8000c8c:	2080      	movs	r0, #128	@ 0x80
 8000c8e:	f7ff ff73 	bl	8000b78 <EPD_SendData>
	EPD_SendCommand(0x22);
 8000c92:	2022      	movs	r0, #34	@ 0x22
 8000c94:	f7ff ff5d 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0XF7);
 8000c98:	20f7      	movs	r0, #247	@ 0xf7
 8000c9a:	f7ff ff6d 	bl	8000b78 <EPD_SendData>
	EPD_SendCommand(0x20); // Activate Display Update Sequence
 8000c9e:	2020      	movs	r0, #32
 8000ca0:	f7ff ff57 	bl	8000b52 <EPD_SendCommand>
	EPD_ReadBusy();
 8000ca4:	f7ff ff7b 	bl	8000b9e <EPD_ReadBusy>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <EPD_Init>:

void EPD_Init(uint16_t Width, uint16_t Height) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	80fb      	strh	r3, [r7, #6]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	80bb      	strh	r3, [r7, #4]
	EPD_Reset();
 8000cbc:	f7ff ff36 	bl	8000b2c <EPD_Reset>

	EPD_ReadBusy();
 8000cc0:	f7ff ff6d 	bl	8000b9e <EPD_ReadBusy>
	EPD_SendCommand(0x12);  //SWRESET
 8000cc4:	2012      	movs	r0, #18
 8000cc6:	f7ff ff44 	bl	8000b52 <EPD_SendCommand>
	EPD_ReadBusy();
 8000cca:	f7ff ff68 	bl	8000b9e <EPD_ReadBusy>

	EPD_SendCommand(0x01); //Driver output control
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff3f 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(Height - 1); //(EPD_WIDTH -1) & 0xff
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff4b 	bl	8000b78 <EPD_SendData>
	EPD_SendData(((Height - 1) >> 8) & 0x01); //(EPD_WIDTH -1) & 0x100
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	121b      	asrs	r3, r3, #8
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff41 	bl	8000b78 <EPD_SendData>
	EPD_SendData(0x00); // 0x01 TB/ 0x02 SM/ 0x04 GD
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff3e 	bl	8000b78 <EPD_SendData>
	 G295 ROW295 ROW294 ROW295 ROW147*/

	/* 0x04 GD: Selects the 1st output Gate
	 This bit is made to match the GATE layout connection on the panel. It defines the first scanning line. */

	EPD_SendCommand(0x11); //data entry mode
 8000cfc:	2011      	movs	r0, #17
 8000cfe:	f7ff ff28 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0x03); //0x04 Am / 0x03 ID[1:0]
 8000d02:	2003      	movs	r0, #3
 8000d04:	f7ff ff38 	bl	8000b78 <EPD_SendData>
	 the RAM. When AM = “0”, the address counter is updated in the X direction. When AM = “1”, the
	 address counter is updated in the Y direction. When window addresses are selected, data are written
	 to the RAM area specified by the window addresses in the manner specified with ID[1:0] and AM
	 bits. */

	EPD_SetWindows(0, 0, Width - 1, Height - 1);
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff52 	bl	8000bc0 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff8d 	bl	8000c3e <EPD_SetCursor>

	EPD_SendCommand(0x3C); //BorderWavefrom
 8000d24:	203c      	movs	r0, #60	@ 0x3c
 8000d26:	f7ff ff14 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0x05);
 8000d2a:	2005      	movs	r0, #5
 8000d2c:	f7ff ff24 	bl	8000b78 <EPD_SendData>

	EPD_SendCommand(0x21); //  Display update control
 8000d30:	2021      	movs	r0, #33	@ 0x21
 8000d32:	f7ff ff0e 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0x00);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff1e 	bl	8000b78 <EPD_SendData>
	EPD_SendData(0x80);
 8000d3c:	2080      	movs	r0, #128	@ 0x80
 8000d3e:	f7ff ff1b 	bl	8000b78 <EPD_SendData>

	EPD_ReadBusy();
 8000d42:	f7ff ff2c 	bl	8000b9e <EPD_ReadBusy>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <EPD_Display>:
		}
	}
	EPD_TurnOnDisplay();
}

void EPD_Display(const uint8_t *blackImage, const uint8_t *redImage, uint16_t Width, uint16_t Height) {
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]
	Width = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <EPD_Display+0x2a>
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	e004      	b.n	8000d82 <EPD_Display+0x34>
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	80fb      	strh	r3, [r7, #6]

	if (blackImage != NULL) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d023      	beq.n	8000dd2 <EPD_Display+0x84>
		EPD_SendCommand(0x24);
 8000d8a:	2024      	movs	r0, #36	@ 0x24
 8000d8c:	f7ff fee1 	bl	8000b52 <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	82fb      	strh	r3, [r7, #22]
 8000d94:	e019      	b.n	8000dca <EPD_Display+0x7c>
			for (uint16_t i = 0; i < Width; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	82bb      	strh	r3, [r7, #20]
 8000d9a:	e00f      	b.n	8000dbc <EPD_Display+0x6e>
				EPD_SendData(blackImage[i + j * Width]);
 8000d9c:	8aba      	ldrh	r2, [r7, #20]
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	88f9      	ldrh	r1, [r7, #6]
 8000da2:	fb01 f303 	mul.w	r3, r1, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fee1 	bl	8000b78 <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 8000db6:	8abb      	ldrh	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	82bb      	strh	r3, [r7, #20]
 8000dbc:	8aba      	ldrh	r2, [r7, #20]
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d3eb      	bcc.n	8000d9c <EPD_Display+0x4e>
		for (uint16_t j = 0; j < Height; j++) {
 8000dc4:	8afb      	ldrh	r3, [r7, #22]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	82fb      	strh	r3, [r7, #22]
 8000dca:	8afa      	ldrh	r2, [r7, #22]
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3e1      	bcc.n	8000d96 <EPD_Display+0x48>
			}
		}
	}
	if (redImage != NULL) {
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d023      	beq.n	8000e20 <EPD_Display+0xd2>
		EPD_SendCommand(0x26);
 8000dd8:	2026      	movs	r0, #38	@ 0x26
 8000dda:	f7ff feba 	bl	8000b52 <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	827b      	strh	r3, [r7, #18]
 8000de2:	e019      	b.n	8000e18 <EPD_Display+0xca>
			for (uint16_t i = 0; i < Width; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	823b      	strh	r3, [r7, #16]
 8000de8:	e00f      	b.n	8000e0a <EPD_Display+0xbc>
				EPD_SendData(redImage[i + j * Width]);
 8000dea:	8a3a      	ldrh	r2, [r7, #16]
 8000dec:	8a7b      	ldrh	r3, [r7, #18]
 8000dee:	88f9      	ldrh	r1, [r7, #6]
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff feba 	bl	8000b78 <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 8000e04:	8a3b      	ldrh	r3, [r7, #16]
 8000e06:	3301      	adds	r3, #1
 8000e08:	823b      	strh	r3, [r7, #16]
 8000e0a:	8a3a      	ldrh	r2, [r7, #16]
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3eb      	bcc.n	8000dea <EPD_Display+0x9c>
		for (uint16_t j = 0; j < Height; j++) {
 8000e12:	8a7b      	ldrh	r3, [r7, #18]
 8000e14:	3301      	adds	r3, #1
 8000e16:	827b      	strh	r3, [r7, #18]
 8000e18:	8a7a      	ldrh	r2, [r7, #18]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d3e1      	bcc.n	8000de4 <EPD_Display+0x96>
			}
		}
	}
	EPD_TurnOnDisplay();
 8000e20:	f7ff ff2f 	bl	8000c82 <EPD_TurnOnDisplay>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <EPD_Sleep>:

void EPD_Sleep() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x10); //enter deep sleep
 8000e30:	2010      	movs	r0, #16
 8000e32:	f7ff fe8e 	bl	8000b52 <EPD_SendCommand>
	EPD_SendData(0x01);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fe9e 	bl	8000b78 <EPD_SendData>
	Delay_ms(100);
 8000e3c:	2064      	movs	r0, #100	@ 0x64
 8000e3e:	f7ff fe55 	bl	8000aec <Delay_ms>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <demo_V3>:
    HAL_Delay(3000);

    EPD_Sleep(); // USYPIAMY WYŚWIETLACZ BO NIE MUSI WIĘCEJ PRACOWAĆ
}

void demo_V3(){ // Wyświetla string1 i string2
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b092      	sub	sp, #72	@ 0x48
 8000e4c:	af04      	add	r7, sp, #16
    const char first[] = "Pepsi MAX";  // PIERWSZY TEKST
 8000e4e:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <demo_V3+0x108>)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e56:	c303      	stmia	r3!, {r0, r1}
 8000e58:	801a      	strh	r2, [r3, #0]
    const char promotion[] = "DZIKIE KURWY, BAKLAZANY XDDD"; //DRUGI TEKST
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <demo_V3+0x10c>)
 8000e5c:	463c      	mov	r4, r7
 8000e5e:	461d      	mov	r5, r3
 8000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e68:	c407      	stmia	r4!, {r0, r1, r2}
 8000e6a:	7023      	strb	r3, [r4, #0]

    uint16_t x_first = 5; // POLOŻENIE PUNKTU STARTOWEGO DLA PIERWSZEGO TEKSTU X
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t y_first = 5; // -||- Y
 8000e70:	2305      	movs	r3, #5
 8000e72:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t x_promotion = 10;// POLOŻENIE PUNKTU STARTOWEGO DLA DRUGIEGO TEKSTU X
 8000e74:	230a      	movs	r3, #10
 8000e76:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t y_promotion = 200;// -||- Y
 8000e78:	23c8      	movs	r3, #200	@ 0xc8
 8000e7a:	863b      	strh	r3, [r7, #48]	@ 0x30

    static uint8_t BlackImage[128/8 * 296]; // NIE DO KOŃCA WIEM CO XD
    static uint8_t RedImage[128/8 * 296];

    int width_bytes = 128 / 8;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    EPD_Init(128, 296);  // INICJALIZACJA WYŚWIETLACZA
 8000e80:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8000e84:	2080      	movs	r0, #128	@ 0x80
 8000e86:	f7ff ff11 	bl	8000cac <EPD_Init>
    HAL_Delay(300); // OPÓŹNIENIE
 8000e8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e8e:	f000 faa3 	bl	80013d8 <HAL_Delay>

    // 1. Wyczyść oba bufory na biało (bit 1 = biały)
    memset(BlackImage, 0xFF, sizeof(BlackImage));
 8000e92:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8000e96:	21ff      	movs	r1, #255	@ 0xff
 8000e98:	482f      	ldr	r0, [pc, #188]	@ (8000f58 <demo_V3+0x110>)
 8000e9a:	f001 fbb8 	bl	800260e <memset>
    memset(RedImage, 0x00, sizeof(RedImage)); // brak czerwieni
 8000e9e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	482d      	ldr	r0, [pc, #180]	@ (8000f5c <demo_V3+0x114>)
 8000ea6:	f001 fbb2 	bl	800260e <memset>
    // CZYŚCIMY BO NIE CHCEMY SYFILISA - PATRZ README.md

    // 4. Teraz wczytaj tekst do BlackImage i RedImage za pomocą Paint:
    Paint_NewImage(BlackImage, 128, 296, 0, WHITE); // TO CHYBA TEŻ DZIAŁA JAKO CZYSZCZENIE BUFORA
 8000eaa:	23ff      	movs	r3, #255	@ 0xff
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <demo_V3+0x110>)
 8000eb8:	f7ff f948 	bl	800014c <Paint_NewImage>
    Paint_SelectImage(BlackImage);
 8000ebc:	4826      	ldr	r0, [pc, #152]	@ (8000f58 <demo_V3+0x110>)
 8000ebe:	f7ff f99d 	bl	80001fc <Paint_SelectImage>
    Paint_DrawString_EN(x_first, y_first, first, &Font16, BLACK, WHITE); // TUTAJ MÓWIMY ŻEBY WYDRUKOWAŁO NAM W PUNKCIE DLA PIERWSZEGO STRINGA WŁAŚNIE TEGO STRINGA W TAKIM FONCIE
 8000ec2:	f107 0220 	add.w	r2, r7, #32
 8000ec6:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8000ec8:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8000eca:	23ff      	movs	r3, #255	@ 0xff
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <demo_V3+0x118>)
 8000ed4:	f7ff fd64 	bl	80009a0 <Paint_DrawString_EN>
    // NO I MÓWIMY TEŻ ŻE MA TO BYĆ WARTOŚĆ MIĘDZY BLACK A WHITE - OBRAZ MONOCHROMATYCZNY DLA BUFORA CZARNEGO
    Paint_NewImage(RedImage, 128, 296, 0, WHITE);
 8000ed8:	23ff      	movs	r3, #255	@ 0xff
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <demo_V3+0x114>)
 8000ee6:	f7ff f931 	bl	800014c <Paint_NewImage>
    Paint_SelectImage(RedImage);
 8000eea:	481c      	ldr	r0, [pc, #112]	@ (8000f5c <demo_V3+0x114>)
 8000eec:	f7ff f986 	bl	80001fc <Paint_SelectImage>
    Paint_DrawRectangle(x_promotion - 2, y_promotion - 2, x_promotion + 100, y_promotion + 50, RED, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000ef0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	b299      	uxth	r1, r3
 8000efc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000efe:	3364      	adds	r3, #100	@ 0x64
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f04:	3332      	adds	r3, #50	@ 0x32
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2401      	movs	r4, #1
 8000f0a:	9402      	str	r4, [sp, #8]
 8000f0c:	2401      	movs	r4, #1
 8000f0e:	9401      	str	r4, [sp, #4]
 8000f10:	24ff      	movs	r4, #255	@ 0xff
 8000f12:	9400      	str	r4, [sp, #0]
 8000f14:	f7ff fc1e 	bl	8000754 <Paint_DrawRectangle>
    Paint_DrawString_EN(x_promotion, y_promotion, promotion, &Font16, BLACK, RED);
 8000f18:	463a      	mov	r2, r7
 8000f1a:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8000f1c:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8000f1e:	23ff      	movs	r3, #255	@ 0xff
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <demo_V3+0x118>)
 8000f28:	f7ff fd3a 	bl	80009a0 <Paint_DrawString_EN>

    // 5. Wyświetl
    EPD_Display(BlackImage, RedImage, 128, 296); // FUNKCJA WYŚWIETLAJĄCA
 8000f2c:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	490a      	ldr	r1, [pc, #40]	@ (8000f5c <demo_V3+0x114>)
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <demo_V3+0x110>)
 8000f36:	f7ff ff0a 	bl	8000d4e <EPD_Display>
    HAL_Delay(3000);
 8000f3a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f3e:	f000 fa4b 	bl	80013d8 <HAL_Delay>

    EPD_Sleep(); // USYPIAMY WYŚWIETLACZ BO NIE MUSI WIĘCEJ PRACOWAĆ
 8000f42:	f7ff ff73 	bl	8000e2c <EPD_Sleep>
}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	@ 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	08002680 	.word	0x08002680
 8000f54:	0800268c 	.word	0x0800268c
 8000f58:	20000048 	.word	0x20000048
 8000f5c:	200012c8 	.word	0x200012c8
 8000f60:	20000000 	.word	0x20000000

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b38      	ldr	r3, [pc, #224]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a37      	ldr	r2, [pc, #220]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b35      	ldr	r3, [pc, #212]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a31      	ldr	r2, [pc, #196]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a2b      	ldr	r2, [pc, #172]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_GPIO_Init+0xf8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|SPIRAM_CS_Pin|EPD_CS_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000fc6:	4826      	ldr	r0, [pc, #152]	@ (8001060 <MX_GPIO_Init+0xfc>)
 8000fc8:	f000 fca9 	bl	800191e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	4824      	ldr	r0, [pc, #144]	@ (8001064 <MX_GPIO_Init+0x100>)
 8000fd2:	f000 fca4 	bl	800191e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fdc:	4822      	ldr	r0, [pc, #136]	@ (8001068 <MX_GPIO_Init+0x104>)
 8000fde:	f000 fc9e 	bl	800191e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SPIRAM_CS_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SPIRAM_CS_Pin|EPD_CS_Pin;
 8000fe2:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4819      	ldr	r0, [pc, #100]	@ (8001060 <MX_GPIO_Init+0xfc>)
 8000ffc:	f000 faf4 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_DC_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MX_GPIO_Init+0x100>)
 8001018:	f000 fae6 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 800101c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	480d      	ldr	r0, [pc, #52]	@ (8001068 <MX_GPIO_Init+0x104>)
 8001032:	f000 fad9 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8001036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2302      	movs	r3, #2
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <MX_GPIO_Init+0x104>)
 8001050:	f000 faca 	bl	80015e8 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	40010c00 	.word	0x40010c00
 8001064:	40011000 	.word	0x40011000
 8001068:	40010800 	.word	0x40010800

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 f950 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f808 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f7ff ff74 	bl	8000f64 <MX_GPIO_Init>
  MX_SPI1_Init();
 800107c:	f000 f84c 	bl	8001118 <MX_SPI1_Init>
  //////////////////////// FUNKCJA TESTOWA/////////////////////////////////


  //demo_V1();     //Wyświetla testowe 3 prostokąty W B R
  //demo_V2();     //Wyświetla image  gImage_logo248x46
  demo_V3();       // Wyświetla string1 i string2
 8001080:	f7ff fee2 	bl	8000e48 <demo_V3>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <main+0x18>

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	@ 0x40
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2228      	movs	r2, #40	@ 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fab9 	bl	800260e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ae:	2301      	movs	r3, #1
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b2:	2310      	movs	r3, #16
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010be:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fc41 	bl	8001950 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010d4:	f000 f819 	bl	800110a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 feae 	bl	8001e54 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010fe:	f000 f804 	bl	800110a <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3740      	adds	r7, #64	@ 0x40
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110e:	b672      	cpsid	i
}
 8001110:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001112:	bf00      	nop
 8001114:	e7fd      	b.n	8001112 <Error_Handler+0x8>
	...

08001118 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_SPI1_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <MX_SPI1_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_SPI1_Init+0x64>)
 8001124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_SPI1_Init+0x64>)
 8001144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_SPI1_Init+0x64>)
 800114c:	2228      	movs	r2, #40	@ 0x28
 800114e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_SPI1_Init+0x64>)
 8001164:	220a      	movs	r2, #10
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_SPI1_Init+0x64>)
 800116a:	f000 ffcf 	bl	800210c <HAL_SPI_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001174:	f7ff ffc9 	bl	800110a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20002548 	.word	0x20002548
 8001180:	40013000 	.word	0x40013000

08001184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a15      	ldr	r2, [pc, #84]	@ (80011f4 <HAL_SPI_MspInit+0x70>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d123      	bne.n	80011ec <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_SPI_MspInit+0x74>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011d4:	23a0      	movs	r3, #160	@ 0xa0
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_SPI_MspInit+0x78>)
 80011e8:	f000 f9fe 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f874 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff fff8 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480b      	ldr	r0, [pc, #44]	@ (80012fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012ce:	490c      	ldr	r1, [pc, #48]	@ (8001300 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012e4:	4c09      	ldr	r4, [pc, #36]	@ (800130c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f001 f995 	bl	8002620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f6:	f7ff feb9 	bl	800106c <main>
  bx lr
 80012fa:	4770      	bx	lr
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001304:	080032b8 	.word	0x080032b8
  ldr r2, =_sbss
 8001308:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800130c:	200025a4 	.word	0x200025a4

08001310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_2_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HAL_Init+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	@ (800133c <HAL_Init+0x28>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f92b 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff ff66 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f935 	bl	80015ce <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f000 f90b 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008
 8001398:	20000010 	.word	0x20000010
 800139c:	2000000c 	.word	0x2000000c

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_IncTick+0x1c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_IncTick+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a03      	ldr	r2, [pc, #12]	@ (80013c0 <HAL_IncTick+0x20>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000010 	.word	0x20000010
 80013c0:	200025a0 	.word	0x200025a0

080013c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <HAL_GetTick+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	200025a0 	.word	0x200025a0

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fff0 	bl	80013c4 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffe0 	bl	80013c4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000010 	.word	0x20000010

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff90 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff49 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff5e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffb0 	bl	800153c <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	@ 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e169      	b.n	80018d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015fc:	2201      	movs	r2, #1
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8158 	bne.w	80018ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a9a      	ldr	r2, [pc, #616]	@ (8001888 <HAL_GPIO_Init+0x2a0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d05e      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001624:	4a98      	ldr	r2, [pc, #608]	@ (8001888 <HAL_GPIO_Init+0x2a0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d875      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800162a:	4a98      	ldr	r2, [pc, #608]	@ (800188c <HAL_GPIO_Init+0x2a4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d058      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001630:	4a96      	ldr	r2, [pc, #600]	@ (800188c <HAL_GPIO_Init+0x2a4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d86f      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001636:	4a96      	ldr	r2, [pc, #600]	@ (8001890 <HAL_GPIO_Init+0x2a8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d052      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 800163c:	4a94      	ldr	r2, [pc, #592]	@ (8001890 <HAL_GPIO_Init+0x2a8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d869      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001642:	4a94      	ldr	r2, [pc, #592]	@ (8001894 <HAL_GPIO_Init+0x2ac>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04c      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001648:	4a92      	ldr	r2, [pc, #584]	@ (8001894 <HAL_GPIO_Init+0x2ac>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d863      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800164e:	4a92      	ldr	r2, [pc, #584]	@ (8001898 <HAL_GPIO_Init+0x2b0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d046      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001654:	4a90      	ldr	r2, [pc, #576]	@ (8001898 <HAL_GPIO_Init+0x2b0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d85d      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d82a      	bhi.n	80016b4 <HAL_GPIO_Init+0xcc>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d859      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001662:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <HAL_GPIO_Init+0x80>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016bd 	.word	0x080016bd
 8001670:	080016cf 	.word	0x080016cf
 8001674:	08001711 	.word	0x08001711
 8001678:	08001717 	.word	0x08001717
 800167c:	08001717 	.word	0x08001717
 8001680:	08001717 	.word	0x08001717
 8001684:	08001717 	.word	0x08001717
 8001688:	08001717 	.word	0x08001717
 800168c:	08001717 	.word	0x08001717
 8001690:	08001717 	.word	0x08001717
 8001694:	08001717 	.word	0x08001717
 8001698:	08001717 	.word	0x08001717
 800169c:	08001717 	.word	0x08001717
 80016a0:	08001717 	.word	0x08001717
 80016a4:	08001717 	.word	0x08001717
 80016a8:	08001717 	.word	0x08001717
 80016ac:	080016c5 	.word	0x080016c5
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	4a79      	ldr	r2, [pc, #484]	@ (800189c <HAL_GPIO_Init+0x2b4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ba:	e02c      	b.n	8001716 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e029      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	3304      	adds	r3, #4
 80016ca:	623b      	str	r3, [r7, #32]
          break;
 80016cc:	e024      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	3308      	adds	r3, #8
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e01f      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	330c      	adds	r3, #12
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e01a      	b.n	8001718 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ea:	2304      	movs	r3, #4
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e013      	b.n	8001718 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	611a      	str	r2, [r3, #16]
          break;
 8001702:	e009      	b.n	8001718 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	615a      	str	r2, [r3, #20]
          break;
 800170e:	e003      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x130>
          break;
 8001716:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2bff      	cmp	r3, #255	@ 0xff
 800171c:	d801      	bhi.n	8001722 <HAL_GPIO_Init+0x13a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_Init+0x13e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	@ 0xff
 800172c:	d802      	bhi.n	8001734 <HAL_GPIO_Init+0x14c>
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x152>
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	3b08      	subs	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	210f      	movs	r1, #15
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80b1 	beq.w	80018ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001768:	4b4d      	ldr	r3, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x2b8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a4c      	ldr	r2, [pc, #304]	@ (80018a0 <HAL_GPIO_Init+0x2b8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <HAL_GPIO_Init+0x2b8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001780:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <HAL_GPIO_Init+0x2bc>)
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a40      	ldr	r2, [pc, #256]	@ (80018a8 <HAL_GPIO_Init+0x2c0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_GPIO_Init+0x1ec>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3f      	ldr	r2, [pc, #252]	@ (80018ac <HAL_GPIO_Init+0x2c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1e8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3e      	ldr	r2, [pc, #248]	@ (80018b0 <HAL_GPIO_Init+0x2c8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1e4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3d      	ldr	r2, [pc, #244]	@ (80018b4 <HAL_GPIO_Init+0x2cc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1e0>
 80017c4:	2303      	movs	r3, #3
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017c8:	2304      	movs	r3, #4
 80017ca:	e004      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_GPIO_Init+0x1ee>
 80017d4:	2300      	movs	r3, #0
 80017d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4093      	lsls	r3, r2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e6:	492f      	ldr	r1, [pc, #188]	@ (80018a4 <HAL_GPIO_Init+0x2bc>)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	492c      	ldr	r1, [pc, #176]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4928      	ldr	r1, [pc, #160]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4922      	ldr	r1, [pc, #136]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	491e      	ldr	r1, [pc, #120]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4918      	ldr	r1, [pc, #96]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	4914      	ldr	r1, [pc, #80]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d021      	beq.n	80018bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	490e      	ldr	r1, [pc, #56]	@ (80018b8 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e021      	b.n	80018ca <HAL_GPIO_Init+0x2e2>
 8001886:	bf00      	nop
 8001888:	10320000 	.word	0x10320000
 800188c:	10310000 	.word	0x10310000
 8001890:	10220000 	.word	0x10220000
 8001894:	10210000 	.word	0x10210000
 8001898:	10120000 	.word	0x10120000
 800189c:	10110000 	.word	0x10110000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40011400 	.word	0x40011400
 80018b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_GPIO_Init+0x304>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4909      	ldr	r1, [pc, #36]	@ (80018ec <HAL_GPIO_Init+0x304>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	3301      	adds	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f ae8e 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	372c      	adds	r7, #44	@ 0x2c
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800192e:	787b      	ldrb	r3, [r7, #1]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001934:	887a      	ldrh	r2, [r7, #2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800193a:	e003      	b.n	8001944 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	041a      	lsls	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e272      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001970:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d112      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
 8001988:	4b8c      	ldr	r3, [pc, #560]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b89      	ldr	r3, [pc, #548]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x12c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d168      	bne.n	8001a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e24c      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76>
 80019b8:	4b80      	ldr	r3, [pc, #512]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a7f      	ldr	r2, [pc, #508]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7a      	ldr	r2, [pc, #488]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a77      	ldr	r2, [pc, #476]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xbc>
 80019f2:	4b72      	ldr	r3, [pc, #456]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a71      	ldr	r2, [pc, #452]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b68      	ldr	r3, [pc, #416]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fcca 	bl	80013c4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fcc6 	bl	80013c4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e200      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe4>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fcb6 	bl	80013c4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fcb2 	bl	80013c4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	@ 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1ec      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b53      	ldr	r3, [pc, #332]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x10c>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a96:	4b49      	ldr	r3, [pc, #292]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1c0      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4939      	ldr	r1, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc6b 	bl	80013c4 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc67 	bl	80013c4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1a1      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4927      	ldr	r1, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc4a 	bl	80013c4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc46 	bl	80013c4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e180      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fc2a 	bl	80013c4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc26 	bl	80013c4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e160      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fa9c 	bl	80020d0 <RCC_Delay>
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fc10 	bl	80013c4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	e00f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc0c 	bl	80013c4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e146      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	42420000 	.word	0x42420000
 8001bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b92      	ldr	r3, [pc, #584]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a6 	beq.w	8001d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b8b      	ldr	r3, [pc, #556]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b88      	ldr	r3, [pc, #544]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a87      	ldr	r2, [pc, #540]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b85      	ldr	r3, [pc, #532]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b82      	ldr	r3, [pc, #520]	@ (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fbcd 	bl	80013c4 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fbc9 	bl	80013c4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	@ 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e103      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b75      	ldr	r3, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c54:	4b6f      	ldr	r3, [pc, #444]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a6e      	ldr	r2, [pc, #440]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a69      	ldr	r2, [pc, #420]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b67      	ldr	r3, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a66      	ldr	r2, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x356>
 8001c8c:	4b61      	ldr	r3, [pc, #388]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a60      	ldr	r2, [pc, #384]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a5a      	ldr	r2, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b58      	ldr	r3, [pc, #352]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a57      	ldr	r2, [pc, #348]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb7d 	bl	80013c4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fb79 	bl	80013c4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0b1      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x37e>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb67 	bl	80013c4 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fb63 	bl	80013c4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e09b      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b3c      	ldr	r3, [pc, #240]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a3b      	ldr	r2, [pc, #236]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d061      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d146      	bne.n	8001dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb37 	bl	80013c4 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb33 	bl	80013c4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e06d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d80:	d108      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d82:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4921      	ldr	r1, [pc, #132]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a19      	ldr	r1, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	430b      	orrs	r3, r1
 8001da6:	491b      	ldr	r1, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb07 	bl	80013c4 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb03 	bl	80013c4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e03d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x46a>
 8001dd8:	e035      	b.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff faf0 	bl	80013c4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff faec 	bl	80013c4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e026      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x498>
 8001e06:	e01e      	b.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e019      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_OscConfig+0x500>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0d0      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b67      	ldr	r3, [pc, #412]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 0207 	bic.w	r2, r3, #7
 8001e7e:	4965      	ldr	r1, [pc, #404]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d040      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d115      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b41      	ldr	r3, [pc, #260]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e073      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b3d      	ldr	r3, [pc, #244]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06b      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4936      	ldr	r1, [pc, #216]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7ff fa3e 	bl	80013c4 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff fa3a 	bl	80013c4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e053      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d210      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4922      	ldr	r1, [pc, #136]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fce:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	@ (800201c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <HAL_RCC_ClockConfig+0x1cc>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_RCC_ClockConfig+0x1d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f99c 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	0800328c 	.word	0x0800328c
 8002020:	20000008 	.word	0x20000008
 8002024:	2000000c 	.word	0x2000000c

08002028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x30>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x36>
 8002056:	e027      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	613b      	str	r3, [r7, #16]
      break;
 800205c:	e027      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0c5b      	lsrs	r3, r3, #17
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	fb03 f202 	mul.w	r2, r3, r2
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e004      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	613b      	str	r3, [r7, #16]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	693b      	ldr	r3, [r7, #16]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	0800329c 	.word	0x0800329c
 80020c8:	080032ac 	.word	0x080032ac
 80020cc:	003d0900 	.word	0x003d0900

080020d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <RCC_Delay+0x34>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <RCC_Delay+0x38>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a5b      	lsrs	r3, r3, #9
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ec:	bf00      	nop
  }
  while (Delay --);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <RCC_Delay+0x1c>
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000008 	.word	0x20000008
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e076      	b.n	800220c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800212e:	d009      	beq.n	8002144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
 8002136:	e005      	b.n	8002144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff f810 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800217a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c8:	ea42 0103 	orr.w	r1, r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	0c1a      	lsrs	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 0204 	and.w	r2, r2, #4
 80021ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002224:	f7ff f8ce 	bl	80013c4 <HAL_GetTick>
 8002228:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	e12a      	b.n	8002494 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_SPI_Transmit+0x36>
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e122      	b.n	8002494 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_SPI_Transmit+0x48>
 8002258:	2302      	movs	r3, #2
 800225a:	e11b      	b.n	8002494 <HAL_SPI_Transmit+0x280>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2203      	movs	r2, #3
 8002268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022aa:	d10f      	bne.n	80022cc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d6:	2b40      	cmp	r3, #64	@ 0x40
 80022d8:	d007      	beq.n	80022ea <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022f2:	d152      	bne.n	800239a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Transmit+0xee>
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d145      	bne.n	800238e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	1c9a      	adds	r2, r3, #2
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002326:	e032      	b.n	800238e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d112      	bne.n	800235c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	1c9a      	adds	r2, r3, #2
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	86da      	strh	r2, [r3, #54]	@ 0x36
 800235a:	e018      	b.n	800238e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235c:	f7ff f832 	bl	80013c4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d803      	bhi.n	8002374 <HAL_SPI_Transmit+0x160>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d102      	bne.n	800237a <HAL_SPI_Transmit+0x166>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e082      	b.n	8002494 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1c7      	bne.n	8002328 <HAL_SPI_Transmit+0x114>
 8002398:	e053      	b.n	8002442 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x194>
 80023a2:	8b7b      	ldrh	r3, [r7, #26]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d147      	bne.n	8002438 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	330c      	adds	r3, #12
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023ce:	e033      	b.n	8002438 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d113      	bne.n	8002406 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002404:	e018      	b.n	8002438 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002406:	f7fe ffdd 	bl	80013c4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d803      	bhi.n	800241e <HAL_SPI_Transmit+0x20a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d102      	bne.n	8002424 <HAL_SPI_Transmit+0x210>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e02d      	b.n	8002494 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1c6      	bne.n	80023d0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f8b0 	bl	80025ac <SPI_EndRxTxTransaction>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002492:	2300      	movs	r3, #0
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024ac:	f7fe ff8a 	bl	80013c4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024bc:	f7fe ff82 	bl	80013c4 <HAL_GetTick>
 80024c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	015b      	lsls	r3, r3, #5
 80024c8:	0d1b      	lsrs	r3, r3, #20
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024d2:	e054      	b.n	800257e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024da:	d050      	beq.n	800257e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024dc:	f7fe ff72 	bl	80013c4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d902      	bls.n	80024f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d13d      	bne.n	800256e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800250a:	d111      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002514:	d004      	beq.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251e:	d107      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800252e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002538:	d10f      	bne.n	800255a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e017      	b.n	800259e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3b01      	subs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	429a      	cmp	r2, r3
 800259a:	d19b      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008

080025ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2201      	movs	r2, #1
 80025c0:	2102      	movs	r1, #2
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7ff ff6a 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e013      	b.n	8002606 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff57 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e000      	b.n	8002606 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <memset>:
 800260e:	4603      	mov	r3, r0
 8002610:	4402      	add	r2, r0
 8002612:	4293      	cmp	r3, r2
 8002614:	d100      	bne.n	8002618 <memset+0xa>
 8002616:	4770      	bx	lr
 8002618:	f803 1b01 	strb.w	r1, [r3], #1
 800261c:	e7f9      	b.n	8002612 <memset+0x4>
	...

08002620 <__libc_init_array>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4d0c      	ldr	r5, [pc, #48]	@ (8002658 <__libc_init_array+0x38>)
 8002626:	4c0d      	ldr	r4, [pc, #52]	@ (800265c <__libc_init_array+0x3c>)
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	42a6      	cmp	r6, r4
 800262e:	d109      	bne.n	8002644 <__libc_init_array+0x24>
 8002630:	f000 f81a 	bl	8002668 <_init>
 8002634:	2600      	movs	r6, #0
 8002636:	4d0a      	ldr	r5, [pc, #40]	@ (8002660 <__libc_init_array+0x40>)
 8002638:	4c0a      	ldr	r4, [pc, #40]	@ (8002664 <__libc_init_array+0x44>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	42a6      	cmp	r6, r4
 8002640:	d105      	bne.n	800264e <__libc_init_array+0x2e>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	f855 3b04 	ldr.w	r3, [r5], #4
 8002648:	4798      	blx	r3
 800264a:	3601      	adds	r6, #1
 800264c:	e7ee      	b.n	800262c <__libc_init_array+0xc>
 800264e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002652:	4798      	blx	r3
 8002654:	3601      	adds	r6, #1
 8002656:	e7f2      	b.n	800263e <__libc_init_array+0x1e>
 8002658:	080032b0 	.word	0x080032b0
 800265c:	080032b0 	.word	0x080032b0
 8002660:	080032b0 	.word	0x080032b0
 8002664:	080032b4 	.word	0x080032b4

08002668 <_init>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	bf00      	nop
 800266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266e:	bc08      	pop	{r3}
 8002670:	469e      	mov	lr, r3
 8002672:	4770      	bx	lr

08002674 <_fini>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr
